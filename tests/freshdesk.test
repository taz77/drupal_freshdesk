<?php

/**
 * @file
 * Contains tests for the Freshdesk module.
 */

/**
 * Test case.
 */
class FreshdeskTestCase extends DrupalWebTestCase {

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return [
      'name' => 'Administrative setup testing',
      'description' => 'Basic configuration testing.',
      'group' => 'Freshdesk',
    ];
  }

  /**
   * Generic web user.
   *
   * @var array
   */
  protected $webUser = [];

  /**
   * Adminstrative user.
   *
   * @var array
   */
  protected $adminUser = [];

  /**
   * SSO Address to use for testing.
   *
   * @var string
   */
  protected $ssoURL = 'http://test.freshdesk.com';

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    // Call the parent with an array of modules to enable for the test.
    $modules[] = 'freshdesk';
    parent::setUp($modules);
    // Create an admin user and log them in.
    $this->adminUser = $this->drupalCreateUser([
      'access content',
      'create page content',
      'edit own page content',
      'administer url aliases',
      'create url aliases',
      'administer users',
      'administer permissions',
    ]);
    $this->drupalLogin($this->adminUser);
    // Set the role as admin for the admin user just created.
    $this->drupalPost('user/' . $this->adminUser->uid . '/edit', ['roles[3]' => TRUE], t('Save'));
  }

  /**
   * Tests core setup for Freshdesk API key.
   */
  public function testFreshdeskAdminConfigTest() {
    $edit = [];
    $edit['freshdesk_url'] = $this->ssoURL;
    $edit['freshdesk_api_key'] = $this->randomName(8);
    $this->drupalPost('admin/config/services/freshdesk', $edit, t('Save configuration'));
    $this->assertText(t('The configuration options have been saved.'), t('Basic setup of module'));
  }

  /**
   * Tests popup setup.
   */
  public function testFreshdeskAdminConfigPopupTest() {
    $edit = [];
    $this->drupalGet('admin/config/services/freshdesk/widgetpopup');
    $edit['freshdesk_widget_popup_type'] = 'button';
    $this->drupalPostAJAX(NULL, $edit, 'freshdesk_widget_popup_type');
    $edit['freshdesk_widget_popup_enable'] = 1;
    $edit['freshdesk_widget_popup_type_attribute'] = 'https://s3.amazonaws.com/assets.freshdesk.com/widget/help-button.png';
    $edit['freshdesk_widget_popup_roles_administrator'] = 1;
    $edit['freshdesk_widget_popup_roles_authenticated_user'] = 1;
    $this->drupalPost(NULL, $edit, t('Save configuration'));
    $this->assertText(t('The configuration options have been saved.'), t('Popup settings saved'));
    // Load front page and look for popup.
    $this->drupalGet('');
    $this->assertRaw('assets.freshdesk.com/widget/freshwidget.js', t('JS found on page for popup'));
  }

  /**
   * Tests embed setup.
   */
  public function testFreshdeskAdminConfigEmbedTest() {
    // Set token.
    $edit = [];
    $this->drupalGet('admin/config/services/freshdesk/widgetembed');
    $this->drupalPost(NULL, $edit, t('Save configuration'));
    $this->assertText(t('The configuration options have been saved.'), t('Embed settings saved'));

  }

  /**
   * A test function to check an array for the existence of a key and value.
   *
   * @param array $header
   * @param string $needle
   * @param string $value
   * @return bool
   */
  private function freshdesk_check_header(array $header, $needle, $value){
    if(array_key_exists($needle, $header)){
      $evaluation = (0 === strpos($header[$needle], $value)) ? TRUE : FALSE;
      return $evaluation;
    }
    else {
      return FALSE;
    }
  }
}
